import argparse
import configparser
import csv
import pathlib

import globus_sdk


def create_globus_authorizer(client_id, client_secret):
    """
    Authenticate with Globus Client Credentials Authentication flow

    examples located here: https://globus-sdk-python.readthedocs.io/en/stable/examples/client_credentials.html
    :param client_id:  UUID for the client generated by registering to Globus Auth Service
    :param client_secret:  Client secret used to generate oauth2 tokens
    :return: globus_sdk.AccessTokenAuthorizer
    """
    client = globus_sdk.ConfidentialAppAuthClient(client_id, client_secret)
    token_response = client.oauth2_client_credentials_tokens()

    # the useful values that you want at the end of this
    globus_transfer_data = token_response.by_resource_server["transfer.api.globus.org"]
    globus_transfer_token = globus_transfer_data["access_token"]
    return globus_sdk.AccessTokenAuthorizer(globus_transfer_token)


def create_transfer_client(authorizer):
    pass


def read_secrets_ini(inifile):
    config = configparser.ConfigParser()
    config.read_file(open(inifile))
    return config


def read_csv_file(csv_file):
    pass


if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="Create a timer to schedule data transfers")
    parser.add_argument("--name", help="Name for the data transfer timer job")
    parser.add_argument("--label", help="Friendly label for the timer job")
    parser.add_argument("--interval", help="Interval in seconds between timer jobs")
    parser.add_argument("--source-endpoint", help="UUID of source globus endpoint")
    parser.add_argument("--dest-endpoint", help="UUID of destination globus endpoint")
    parser.add_argument("--items-file", help="Name of CSV file to parse")

    parser.parse_args()

    user_home = pathlib.Path.home()
    inifile = f"{str(user_home)}/.globus_secrets"
    config = read_secrets_ini(inifile)

    try:
        client_id = config["globus"]["client_id"]
        client_secret = config["globus"]["client_secret"]
    except KeyError as e:
        raise KeyError("Missing values in configuration file. Make sure client_id "
                       "and client_secret are filled-in values")

    authorizer = create_globus_authorizer(client_id, client_secret)








