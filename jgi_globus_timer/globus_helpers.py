import datetime

import globus_sdk
from globus_sdk import TimerJob


def create_globus_authorizer(client_id, client_secret):
    """
    Authenticate with Globus Client Credentials Authentication flow

    examples located here: https://globus-sdk-python.readthedocs.io/en/stable/examples/client_credentials.html
    :param client_id:  UUID for the client generated by registering to Globus Auth Service
    :param client_secret:  Client secret used to generate oauth2 tokens
    :return: globus_sdk.AccessTokenAuthorizer
    """
    scopes = "urn:globus:auth:scope:transfer.api.globus.org:all"
    client = globus_sdk.ConfidentialAppAuthClient(client_id=client_id, client_secret=client_secret)
    return globus_sdk.ClientCredentialsAuthorizer(client, scopes)


def create_transfer_client(authorizer):
    """
    Creates a transfer client object from globus SDK
    :param authorizer: globus_sdk.AccessTokenAuthorizer
    :return: globus_sdk.TransferClient
    """
    return globus_sdk.TransferClient(authorizer=authorizer)


def strtobool(value):
    boolstr = value.lower()
    if boolstr == "true":
        return True
    elif boolstr == "false":
        return False


def create_transfer_data(transfer_client, src_endpoint, dest_endpoint, csv_reader, deadline=None):
    if deadline is None:
        now = datetime.datetime.utcnow()
        deadline = now + datetime.timedelta(days=10)
    tdata = globus_sdk.TransferData(transfer_client,
                                    src_endpoint,
                                    dest_endpoint,
                                    sync_level=0,
                                    preserve_timestamp=True,
                                    deadline=str(deadline))
    for row in csv_reader:
        tdata.add_item(csv_reader[row]["source_path"],
                       csv_reader[row]["destination_path"],
                       recursive=strtobool(csv_reader[row]["recursive"]))
    return tdata


def create_timer_client(authorizer):
    return globus_sdk.TimerClient(authorizer=authorizer)


def create_timer_job(transfer_data, start, interval, name):
    return TimerJob.from_transfer_data(transfer_data, start, interval, name=name)
